{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAW,C,SAAEL,E,MAAUC,GAC7B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KACvBN,EACFK,EAAQF,GAERG,EAAOH,EAAA,GAGb,CA1CgBI,SAASC,cAAc,SAE/BC,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAEC,iBACF,IAAIZ,EAAQa,OAAOF,EAAEG,OAAOd,MAAMe,OAClC,MAAMC,EAAOH,OAAOF,EAAEG,OAAOE,KAAKD,OAC5BE,EAASJ,OAAOF,EAAEG,OAAOG,OAAOF,OACtCG,QAAQC,IAAI,C,MAACnB,E,KAAOgB,E,OAAMC,IAE1B,IAAK,IAAIlB,EAAW,EAAGA,GAAYkB,EAAQlB,GAAY,EACrDD,EAAcC,EAAUC,GACrBoB,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,YAAW,KACTzB,EAAA0B,OAAOC,QAAQ,uBAAuBxB,QAAeC,MAAS,GAC7DA,EAAA,IAEJwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,YAAW,KACTzB,EAAA0B,OAAOG,QAAQ,sBAAsB1B,QAAeC,MAAS,GAC5DA,EAAA,IAEPkB,QAAQC,IAAI,SAAUnB,GACtBA,GAASgB,EAGXL,EAAEe,cAAcC,SAASX,KAAKD,MAAQ,GACtCJ,EAAEe,cAAcC,SAAS3B,MAAMe,MAAQ,GACvCJ,EAAEe,cAAcC,SAASV,OAAOF,MAAQ,EAC1C,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  let delay = Number(e.target.delay.value);\n  const step = Number(e.target.step.value);\n  const amount = Number(e.target.amount.value);\n  console.log({delay, step, amount});\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n    console.log(\"delay:\", delay);\n    delay += step;\n  }\n\n  e.currentTarget.elements.step.value = '';\n  e.currentTarget.elements.delay.value = '';\n  e.currentTarget.elements.amount.value = '';\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const objValue = { position, delay };\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(objValue);\n    } else {\n      reject(objValue);\n    }\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","objValue","Promise","resolve","reject","document","querySelector","addEventListener","e","preventDefault","Number","target","value","step","amount","console","log","then","setTimeout","Notify","success","catch","failure","currentTarget","elements"],"version":3,"file":"03-promises.88aa5394.js.map"}